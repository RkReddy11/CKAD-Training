In Kubernetes, a Secret is an object used to store and manage sensitive information such as passwords, API keys, and TLS certificates. Secrets are designed to keep this sensitive data secure by encoding it and providing mechanisms to safely distribute it to containers running inside pods.

Let's understand this with an example:

Imagine you have a web application that needs to connect to a database, and it requires the following sensitive information:

Database username: myuser
Database password: mypassword
Instead of hard-coding these values directly into your application code or using them in plain text, you can create a Secret to store this sensitive information securely. Here's an example of how you can define a Secret in Kubernetes:

apiVersion: v1
kind: Secret
metadata:
  name: db-credentials
type: Opaque
data:
  username: bXl1c2Vy
  password: bXlwYXNzd29yZA==
In this example, we create a Secret named db-credentials. The type is set to Opaque, indicating that the data stored in the Secret is arbitrary bytes and not specifically encoded for any particular use.

The data section contains the sensitive information encoded in base64 format. Note that the values bXl1c2Vy and bXlwYXNzd29yZA== are the base64-encoded versions of myuser and mypassword, respectively. This encoding is used to provide a basic level of obfuscation for the sensitive data.

Now, let's say you have a deployment manifest for your web application. You can refer to the Secret values in the deployment manifest using environment variables or volume mounts. Here's an example of how you can use the Secret in a deployment:

apiVersion: apps/v1
kind: Deployment
metadata:
  name: myapp-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: myapp
  template:
    metadata:
      labels:
        app: myapp
    spec:
      containers:
        - name: myapp-container
          image: myapp-image
          env:
            - name: DB_USERNAME
              valueFrom:
                secretKeyRef:
                  name: db-credentials
                  key: username
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: db-credentials
                  key: password
          # Or you can use volume mounts to access the Secret
          volumeMounts:
            - name: secret-volume
              mountPath: /secrets
              readOnly: true
      volumes:
        - name: secret-volume
          secret:
            secretName: db-credentials
In this deployment example, we're using the Secret values to set environment variables DB_USERNAME and DB_PASSWORD in the container running our web application. These environment variables will be accessible within the application code, allowing it to securely access the database using the provided credentials.

Alternatively, you can also mount the Secret as a volume to access the sensitive files directly in the container.

By using Secrets, you can separate and protect sensitive information from being exposed in your Kubernetes manifests or stored in plain text. Secrets are encrypted and provide a more secure way to handle sensitive data within your applications. If you need to update any sensitive information, you can simply update the Secret without modifying the application code or redeploying the application. The changes will be automatically reflected in the running pods using the updated secret values.

Creating Secrets in Imperative way:

kubectl create secret generic db-secret --from-literal=DB_Host=sql01 --from-literal=DB_User=root --from-literal=DB_Password=password123

Remember that secrets encode data in base64 format. Anyone with the base64 encoded secret can easily decode it. As such the secrets can be considered as not very safe.

The concept of safety of the Secrets is a bit confusing in Kubernetes. The kubernetes documentation page and a lot of blogs out there refer to secrets as a "safer option" to store sensitive data. They are safer than storing in plain text as they reduce the risk of accidentally exposing passwords and other sensitive data. In my opinion it's not the secret itself that is safe, it is the practices around it. 

Secrets are not encrypted, so it is not safer in that sense. However, some best practices around using secrets make it safer. As in best practices like:

Not checking-in secret object definition files to source code repositories.

Enabling Encryption at Rest for Secrets so they are stored encrypted in ETCD. 



Also the way kubernetes handles secrets. Such as:

A secret is only sent to a node if a pod on that node requires it.

Kubelet stores the secret into a tmpfs so that the secret is not written to disk storage.

Once the Pod that depends on the secret is deleted, kubelet will delete its local copy of the secret data as well.

Read about the protections and risks of using secrets here

Having said that, there are other better ways of handling sensitive data like passwords in Kubernetes, such as using tools like Helm Secrets, HashiCorp Vault.
